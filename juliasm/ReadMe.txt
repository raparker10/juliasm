JuliASM

Multi-threaded Julia set explorer in Assembly

This program is intended as a performance testbed to compare relative 
performance of the following platforms.  It is not intended as a 
general-purpose fractal generation program and as such does not have many 
features that would be expected in such a piece of software; it only 
implements functionality needed to support performance comparisons of the 
various compute platforms.

* x87 (generated by compiler}
* SSE
* SSE2
* AVX 32-bit
* AVX 64-bit
* AVX2
* OpenCl

While Assembly and multi-threading are the focus, as much of this program as conveniently 
possible is written using C++, WindowsAPI, and intel intrinsics as this enables better 
portability (especially between microprocessor generations and word sizes) and is simply 
how modern programs are written. 

This program is a work in progress, and as such not all combinations of calculation and platform
are complete.  Here is the current status.

                                 Technology
Calculation | x87    | SSE    |  SSE2  |  AVX-32|  AVC-64 | AVX2   | OpenCL |
-----------------------------------------------------------------------------
Mandelbrot  | Yes    | Yes    | Yes    |  No    |  No     | No     |  No    |
-----------------------------------------------------------------------------
Julia       | Yes    | No     | No     |  Yes   |  Yes    | No     |  No    |
-----------------------------------------------------------------------------

Source Files
-------------------------------------------------------------------------------
CApplication.cpp / .h
Generic application class used for application startup and message handling.

CBitmap.cpp / .h
Manages the bitmaps used for draing the Mandelbrot and Julia sets.  
A thin wrapper around Windows GDI bitmmap functionality.

CJuliasmApp.cpp / .h
Application class (derived from CApplication above).  Responsible
for all application functionality.

CPixelPoint.h
Defines a class for holding a point.

juliasm.ico
Appliacation icon.

juliasm.rc
Contains application resources: menu, dialog box, strings, accelerators...

JuliasmApp_Julia.cpp
Implements portions of the CJuliasmApp that perform Julia set calculations.

JuliasmApp_Mand.cpp
Implements portions of the CJuliasmApp that perform Mandelbrot set calculations.

CPallett.cpp /h
Provides color definition and management functions.

cpu.cpp /.h
Implements a class that detects CPU capabilities (e.g. SSE, SSE2, AVX...)

juliasm.cpp /.h
Application entry point.  Creates the JuliasmApp object.

Resource.h
Contains definitions of resource values.

small.ico
Application small icon.

stdafx.cpp /.h
File generated by Microsoft Visual Studio for management of pre-compiled header files.


To-do
-------------------------------------------------------------------------------
* Implement Mandelbrot functions in AVX-32
* Implement Mandelbrot functions in AVX-64
* Implement Mandelbrot functions in AVX2
* Implement Mandelbrot functions in OpoenCL
* Implement Julia Sett functions in SSE
* Implement Julia Sett functions in SSE2
* Implement Mandelbrot functions in AVX2
* Implement Mandelbrot functions in OpenCL
* Incorporate FMA
* Implement panning (e.g. with click-and-drag)
* Implement swiching zooming and panning between the Mandelbbrot and Julia images
* Enable changing the relative sizes of each image so that more of the Mandelbrot set can be seen / explored
* Write x87 code in Assembly
* Ensure that julia set pixels are numerically square.  Currently they change aspect ratio along with the window.
* Update mousewheel functionality to zoom from the image center, not the mouse pointer location